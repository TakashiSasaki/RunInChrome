#!/usr/bin/env node

const chromeLauncher = require("chrome-launcher");
const CDP = require("chrome-remote-interface");
const fs = require("fs");

const pathArray = process.argv.slice(2);
//console.log(pathArray);

//assert.isString(scriptPath);
//console.log(scriptPath);

function promiseReadFile(path){
  return new Promise(function(resolve, reject){
    fs.readFile(path, "utf8", function(err, data) {
      if(err){
        reject(err);
      }//of
      resolve(data);
    });
  });
}//promiseReadFile


async function evaluate(expression) {
  const chrome = await chromeLauncher.launch({
    chromeFlags: [
      "--headless"
    ],
    chromePath: "chromium-browser"
  });

  const protocol = await CDP({
    port: chrome.port
  });

  protocol.Runtime.enable();

  const result = await protocol.Runtime.evaluate({
    expression: expression
  });
  chrome.kill();
  return result.result;
};

const promiseArray = pathArray.map(promiseReadFile); 
//console.log(promiseArray);
Promise.all(promiseArray).then(a => a.join("\n")).then(a=>evaluate(a)).then(a=>console.log(a));

//promiseReadFile
//  .then((data)=>{return data})
//  .then((data)=>{return evaluate(data);})
//  .then((result)=>{console.log(result);});

